\input texinfo    @c -*-texinfo-*-
%
% lm32-toolchain.in - main file for the documentation
%
%%%%

%------------------------------------------------------------------------------
%
%                         NOTE FOR THE UNAWARE USER
%                         =========================
%
%    This file is a texinfo source. It isn't the binary file of some strange
%    editor of mine. If you want ASCII, you should "make lm32-toolchain.txt".
%
%------------------------------------------------------------------------------

%
% This is not a conventional info file...
% I use three extra features:
%   - The '%' as a comment marker, if at beginning of line ("\%" -> "%")
%   - leading blanks are allowed (this is something I can't live without)
%   - braces are automatically escaped when they appear in example blocks
%

@comment %**start of header
@documentlanguage en
@setfilename lm32-toolchain.info
@settitle lm32-toolchain
@iftex
@afourpaper
@end iftex
@comment %**end of header

@setchapternewpage off

@set update-month February 2019
@c the release name below is substituted at build time
@set release __RELEASE_GIT_ID__

@finalout

@titlepage
@title LM32-toolchain
@subtitle Rebuilding a compiler in 2019
@subtitle @value{update-month} (@value{release})
@author Alessandro Rubini, for GSI
@end titlepage
@headings single

@c ##########################################################################
@iftex
@contents
@end iftex

@paragraphindent 1

@c ##########################################################################
@node Top
@top Overview

This package is about considering a newer compiler for the LM32
processor, that is currently used in White Rabbit
(@url{https://www.ohwr.org/projects/white-rabbit}) and other projects
inside GSI (@url{gsi.de}).

@c ##########################################################################
@node Abstract (TLDR)
@chapter Abstract (TL;DR)

Currently, the White Rabbit PTP Core (@i{wrpc}) includes an LM32
processor, and we are building stuff with @i{gcc-4.5.3}, mostly using
a build of mine that dates back to November 2011.

This work is about refreshing the tool chain, for both White Rabbit
and other LM32-based project.

 We must be able to:
@itemize @bullet
@item Rebuild that compiler with current or almost-current hosts;
@item Run newer compilers to see if new features can benefit our
projects;
@item Try alternative tool chains, such as LLVM.
@end itemize

The current status of this work is:
@itemize @bullet
@item We have a working 64-bit build of gcc-4.5.3, with newer support libraries;
@item Newer compilers work, but create bigger binaries and are not suitable
for our projects, at least the big ones
@item No work on LLVM is yet completed.
@c FIXME LLVM
@end itemize

@c ##########################################################################
@node Initial Remarks
@chapter Initial Remarks

@c ==========================================================================
@node Other Works
@section Other Works

Before starting this, I checked what other people published. Unfortunately
I found very little, and I welcome different pointers. This is the state
of the art, to my knowledge, as of 2019-01:

@table @code

@item https://github.com/shenki/lm32-build-scripts

	A script by Joel Stanley. The repo is just two commits: his build
        script for gcc-6.2 and a later update to gcc-6.3.  This confirmed
        to me that LM32 is not abandonware within @i{gcc}, but the specific
        versions are not the best choice (e.g., a daily snapshot of @i{newlib},
        that I can't find any more.

@item https://github.com/optixx

	The package includes the whole LM32 Verilog sources and support
        tools, but the toolchain suggested is a snapshot of gcc-4.5, which
        is older than our current setup.

@item https://github.com/m-labs/llvm-lm32

	This will be one of my starting points for LLVM support, but I
        didn't work on it as yet.
@c FIXME LLVM

@end table

@c ==========================================================================
@node gcc Version Numbering
@section gcc Version Numbering

Up to gcc-4.x, the second number in the version number was like a
major release, so gcc-4.6 was a different thing than gcc-4.5, while
the third number was just a maintainance/bugfix release.  Starting
with version 5, the first number is the major release. So gcc-5.3 is a
bugfix release of the gcc-5 cycle.

For this reason, I tested the last one of most gcc-4.x series
(4.5.3 revealed good over the years so I skipped 4.5.4), but only
the last one of versions 5, 6, 7, 8.
@c FIXME 4.5.4 not really?

@c ==========================================================================
@node This Work
@section This Work

@b{Note}: this section is meta-information about this package;
please goto @ref{The Build Script} if you want to start compiling.

This document is quite verbose, because I hope the information will
be useful in the future, when somebody will pick it up to go further,
with yet-unreleased tool chain versions. As a side effect, I use it
as my own reference while working on this.

The package includes a shell script, configuration files, patches
and a document. Binaries are not included in this repository, but I
placed important tarballs on OHWR or the GSI network.  In a package
about rebuilding, binaries are out of scope.

To build the output formats of the document, just @i{make} in the
@t{doc/} subdirectory of the @i{git} clone. You may need to install
the @i{texinfo} package.

The document is written in TeXinfo, the GNU project documentation
standard.  It may be old-fashioned, but it revealed a future-proof
choice, when I made it. However, I love being able to place white
space at the beginning of the lines, to make sense of the file in my
editor, and avoid markup in @@example section so I can copy them from
the shell terminal into
the editor (or from it to the shell). For this reason, I preprocess
the real input file. The source file is @i{lm32-toolchain.in} and not
the @t{.texinfo} one; if you edit the latter, it will be overwritten
at the next built (that's why I make it read-only, as a warning).

If you are the new maintainer of this package and you want to move to
a different source format, please consider using the source file
@i{lm32-toolchain.in} as your starting point, as an alternative the
text output file might be better, or the @i{html} output if you can
import the italics and tty-face markup.

@c ==========================================================================
@node Testing
@section Testing

The rebuilt toolchains were tested using the current
@i{proposed_master} commit of @i{wrpc-sw} (commit @t{4e6a3ea} as I
write this. Testing on other packages is welcome.


@c ##########################################################################
@node The Build Script
@chapter The Build Script

Obviously, everybody and their friend wrote a build script. Some are
simple sequences of commands, like the ones in @ref{Other Works},
some are very complex tools, like buildroot or (got forbid!) yocto.
I prefer something in the middle, with some factorization but not much,
to keep things simple.

Fact is, my script of 2010 still works fine, so I recycle it here.
It is a shell script (@t{tools/build-generic} that relies on a
configuration file, which is a dozen lines long. Mainly, you state
which package versions to download and what build options to apply.
For example:

@example
  PREFIX="$(/bin/pwd)/install/lm32-gcc-$(date +%y%m%d-%H%M)"
  TARGET="lm32-elf"
  GCC_CONFIG="--disable-libssp"

  # table of programs,versions and so on
  prog gcc      8.2.0    xz   https://ftp.gnu.org/gnu/gcc/gcc-8.2.0
  prog binutils 2.31.1   xz   http://ftp.gnu.org/gnu/binutils
  prog newlib   3.0.0    gz    ftp://sources.redhat.com/pub/newlib
  [...]
  # package list: what to get
  plist="gcc binutils gdb newlib mpc mpfr gmp"
@end example

The script is then called with the configuration file as an argument,
and it creates a complete build log which is timestamped by the
minute. The configuration above also installed in a place that is
timestamped by the minute, but you may prefer a difference choice (as
I did when creating the binaries that I eventually distributed).

To prevent any error and to be able to recover what your did, the script
saves itself and the configuration file to the log file, before the build
starts

Following a request from GSI, the installation directory now includes
the day of the build and two hashes: the git commit of this repository
and the configuration file. That's because the basename of the
directory (as appearing in the output of @i{gcc -v}) can be saved
during FPGA builds, so to keep track of which toolchain was used to
build each binary image.

Please note that the configurations in this package define @t{PREFIX}
by themselves. The build script offers a default (within @t{/opt} but
configurations override it.

The build directory (and log file) currently use a timestamp-based name,
because I prefer to keep all build logs, with errors; I don't want any
to be overwritten while I work on several builds at the same time.


For example, this is what I'm getting now, while editing this:

@smallexample
laptopo% ./build-generic ~/wip/lm32-toolchain/configs/gcc-4.5.3-orig
Using /home/rubini/wip/lm32-toolchain/configs/gcc-4.5.3-orig as config file
Using PREFIX=//lap-x/lm32/2019/build/install/lm32-gcc-190204-804f19-8e23-dirty
Building in "/lap-x/lm32/2019/build/build-190204-17-26"
Log file is "/lap-x/lm32/2019/build/build-190204-17-26.log"
@end smallexample

From the above it can be noted that

@itemize @bullet
@item I work in a different directory (external hard drive, for convenience),
and @t{build-generic} is a symlink to the repo;
@item the date I run the build is @t{190204}, turned to the first item in the
PREFIX value;
@item the hash of the configuration is @t{804f}19: this is the variable
@t{HASHCFG} calculated in the script;
@item the hash of this repo is @t{8e23-dirty}: variable @t{HASHREPO};
@item the build directory and log file are named using a timestamp instead
of the hashes.
@end itemize


@c ==========================================================================
@node Downloads
@section Downloads

As a first step, the script is downloading source files. The download
directory it @t{./downloads} where you invoke the script; such a
directory can be a symbolic link. The script uses the version number,
suffix and base URL as in the example above (for @i{gcc} there is a
different directory for each version, thus the duplicate number); it
downloads one @i{tar} file for each @i{package} listed in the
@t{plist} variable (and for which is uses the corresponding @t{prog}
line above it. If the file is already there, it is not downloaded,
without a check of integrity.  Files that are already in place can be
symbolic links (for example, I already had most of them due to
@i{buildroot} runs over the last years, so I symlinked them all and
avoided downloading).

Then, all source @i{tar} files of interest are expanded into
@t{./src/} where you invoked the script. All relevant packages
create a directory with the same base name, and this name is preserved.
For example:

@example
   laptopo% tar tf downloads/mpc-1.0.3.tar.gz | head -1
   mpc-1.0.3/
   laptopo% ls -d src/mpc*
   src/mpc-0.9/  src/mpc-1.0.3/
@end example

If the target directory within @t{./src} exists, it is preserved. This
allowed me to test my patches easily. You can remove
them all to restart a clean build, if you want.

@c ==========================================================================
@node Applying Patches
@section Applying Patches

The current version of the script applies patches, if any exist in the
@t{patches} subdirectory of this package.  It does so by creating a local
@i{git} repository, committing the untarred files and then using @t{git-am}
to patch. This initial commit of the whole source tree can be a very long
operation, but fortunately it only applies once for each package, and
not many packages are patched.

This is an example from my first build of @i{gcc-4.5.3} within this
package:

@smallexample
Uncompressing ../downloads/gcc-4.5.3.tar.bz2...
Patching gcc-4.5.3
Initialized empty Git repository in /u/arubini/lm32-toolchain/src/gcc-4.5.3/.git/
Applying: gcc/doc: fix use of @itemx
[...]
@end smallexample

please note that from ``Initialized'' to ``Applying'' above, you may
wait more than for the uncompression step (which of the two is longer
depends on your disk speed, RAM size and current load).

When patches exist, the script creates a marker file to note that they
are already applied. You can remove the marker file
(e.g. @t{gcc-4.5.3-patched}) and the @t{.git} directory within the package
to start clean again.

For each package that I had to patch, I provide the git-generated patch-set
in the subdirectory @t{patches/@i{pkg-x.y}}. This set is what is
automatically used by the script.

@c ==========================================================================
@node The Build Directory
@section The Build Directory

Each run of the script creates a new build directory, called
@t{build-$(date +%y%m%d-%H-%M)} (for example, @t{190116-12-00} if I
built at noon today). The log file has the same name, with a trailing
@t{.log}.

If an error happens and you re-run the build, everything will start
again in a different directory. This allows me to ensure I didn't forget
something and what works for me will for you as well. If you need
to debug a failed build, you can @t{cd} to the build directory and
reproduce the error or try your fixes.

The size of each build directory is from 650MB up to 2.3GB, in the
range of versions I document here as working. Don't be shy about
removing those when you are done with each of them.

@c ==========================================================================
@node Using the Log File
@section Using the Log File

The log file includes the complete compilation log, so your can look
for errors, but also the script and the configuration file. I did this
because I tend to forget saving all information about a build, for
example because I edit the configuration file for the next version I
try and save with the same name so to recycle the command line.

To recover the configuration that was used in a build, you can use
@t{tools/recover-config}:

@example
   laptopo% ./tools/recover-config build-190113-10-00.log > prev-config
@end example

Similarly, @t{tools/recover-script} is there, but I never had to change the
script for all builds I describe in this document.

To look for errors, please grep for @t{Error} in the log file (not the
upper-case 'E'). If none is there, the build was successful. I think I've
been a little lazy with error checking in the script itself.

To find what your build time was (so to plan your coffee break when
you run it again), check for lines starting with '@t{###}':

@example
  laptopo% grep '^###' ../../build-190115-19-07.log
  ### Tue Jan 15 19:07:56 CET 2019: config binutils: "../../src/binutils[...]"
  [...]
  ### Tue Jan 15 19:27:48 CET 2019: install it all: "make install"
  ### Tue Jan 15 19:28:15 CET 2019: done: "true"
@end example

In each line above, the final string is the command being executed,
that's why it is just @t{true} in the final 'done' message.

Finally, if you don't remember what build a specific log refers to,
@t{tools/describe-log} extracts a subset of the configuration file,
so you know the gcc, binutils and newlib versions, which is the most
imporant information item:

@example
   laptopo% tools/describe-log build-190205-08-39.log
   build-190205-08-39.log: gcc 4.7.4
   build-190205-08-39.log: binutils 2.21.1
   build-190205-08-39.log: newlib 3.0.0
@end example

The size of the log file goes from 7.5MB to 30MB, in the range of versions
described here.

@c ==========================================================================
@node Example Run
@section Example Run

This is an example run of the script, as executed on @t{lx-pool.gsi.de}.
Pleae note that I suggest to run in the root directory of this package
(possibly after filling @t{./downloads} with the files you already have),
because the @t{.gitignore} file already supports it.

@smallexample
   lxi097$ ./tools/build-generic configs/gcc-4.5.3-newlib-3.0
   Using PREFIX=//u/arubini/lm32-toolchain/install/lm32-gcc-190204-e4348a-3569
   Building in "/u/arubini/lm32-toolchain/build-190204-23-55"
   Log file is "/u/arubini/lm32-toolchain/build-190204-23-55.log"
   Dowloading https://ftp.gnu.org/gnu/gcc/gcc-4.5.3//gcc-4.5.3.tar.bz2
   [...]
   Uncompressing ../downloads/gcc-4.5.3.tar.bz2...
@end smallexample

Then, patches are applied and the build proceeds, finally installing
the compiler binary and support files.

@c ##########################################################################
@node Host System
@chapter Host System

Currently, I only run the build on @i{Debian-8}, using a 64-bit
installation. The host compiler is @i{gcc-4.9.2}. This matches what
@i{lx-pool.gsi.de} is, so it's a good first step.



@c ##########################################################################
@node gcc-4.5.3
@chapter gcc-4.5.3

As a first step, let's rebuild what we already were using. Current
tools (as of Debian 8) fail the build, because some warnings are now
considered errors. Thus, I provide patches for a successful build.

Most of the errors are related to documentation, where incorrect keywords
were used, both in @i{gcc} and @i{binutils}. Some errors are
because of ``unused expression result'' in some macro
expansions, and one ``value may be used uninitialized''. The last
error was a ``mismatching prototype'' because of a missing @t{const}.
All of these are fixed in my patch-set.

@c ==========================================================================
@node Original Configuration
@section Original Configuration

By running the script with @t{configs/gcc-4.5.3-orig} we rebuild the
same compiler we have been using in the last years. But if we do it in
a 64-bit host we'll have a binary more suitable for current build
machines. the build is 860MB and the installation is 210MB.
The binary built in Debian 8 relies on @t{glibc-2.19}.

When tested against @i{wrpc-sw}, commit @t{54d3079}, the output binary
is larger by 16 bytes than the one build with our legacy compiler binary.

One logical expression is translated differently, the code is two
instructions more than it used to be, and that expression is built
twice. Everything else is identical. The expression is the core
of @i{spll_debug()}.
@c FIXME: fix the non-inline function.

@c ==========================================================================
@node Upgrading Support Libraries
@section Upgrading Support Libraries

Configuration @t{configs/gcc-4.5.3-updated} creates the same base
compiler but uses more recent support libraries:
@i{mpc}, @i{mpfr}, @i{gmp}.  Using a newer version of @i{binutils},
such as 2.28.1, is not feasible because the two @i{libiberty} in
@i{gcc} and @i{binutils} differ in some symbol and cause a miscompilation
(we could find a workaround, but it is not worth the effort).

For @i{newlib} I chose 2.0 because more recent versions would increase
the binary size of our code, mainly because of support for local
languages. See next section.

No new patches are needed with this tool-set. This compiler builds exactly
the same code as the previous one -- as expected, because support
libraries are about multi-precision mathematical expressions.

@c ==========================================================================
@node Upgrading newlib
@section Upgrading newlib

I tried upgrading newlib to the version 2.5 (latest 2.x at time of
writing) and 3.0 (latest official 3.x at time of writing).

Unfortunately, the binary size of @i{wrpc-sw} got bigger, because
of locate-related changes in case-insensitive character matching.

This is the size of the compiled @t{wrpc-sw} file in the various
situations:

@example
   text    data     bss     dec     hex filename
 102604    6888    4652  114144   1bde0 wrc-4.5.3-nl2.0.elf
 103240    8320    4652  116212   1c5f4 wrc-4.5.3-nl2.5.elf
 103240    8320    4652  116212   1c5f4 wrc-4.5.3-nl3.0.elf
@end example

By checking with ``@t{nm --size-sort}'' we can verify that there is
no change for us between version 2.5 and 3.0, while the size difference
from 2.0 to 2.5 comese from

@itemize
@item @t{impure_data}: 1064 bytes, not present in 2.0
@item @t{__global_locale}: 364 bytes, not present in 2.0
@item @t{_setlocale_r}: 144 bytes, not present in 2.0
@item @t{strcasecmp}: 60 bytes longer
@item other smaller functions related to wide characters
@c _mbtowc_r _wctomb_r __ascii_mbtowc setlocale __ascii_wctomb
@c __locale_ctype_ptr __locale_mb_cur_max
@c __locale_ctype_ptr_l _impure_ptr
@end itemize

All of these come from @i{strcasecmp}, only used in command matching.

Replacing all of them with @i{strcmp}, with the
following command:

@example
   sed -i s/strcasecmp/strcmp/ shell/*.c
@end example

makes @i{wrc.elf} 400 bytes shorter than the original, irrespective of
the newlib version we used to build the compiler (because no arcane
newlib function is being used in the binary).

The change is pushed to @i{ohwr} and you can cherry-pick commit @t{bb84ad0}
to build with @i{strcmp} without running a dirty source tree.

Configurations files @t{gcc-4.5.3-newlib-2.5} and
@t{gcc-4.5.3-newlib-3.0}, part of this package, can be used for these builds.

@c ##########################################################################
@node Installing the Compiler
@chapter Installing the Compiler

After building, possibly using my convoluted installation names
it is possible to make a @i{tar} file of the directory and uncompress
it in a different pathname. When @t{lm32-elf-gcc} is called, it will
find all its support files using relative pathnames.

For example:

@example
   cd install
   D=lm32-gcc-190116-1648
   mv $D lm32-elf-gcc
   tar cJf lm32-elf-gcc.tar.xz lm32-elf-gcc
   mv lm32-elf-gcc $D
@end example

This works for all @i{gcc} builds described here.

@c ##########################################################################
@node Newer gcc Versions
@chapter Newer gcc Versions

This chapter documents what I achieved with newer gcc versions. In
general I'm not very happy and I suggest sticking with 4.5.3.

As explained in @ref{gcc Version Numbering}, the major number is
either @i{4.y} for version numbers @i{4.y.z} or @i{x} for versions
@i{x.y.0} with x >= 5.

The main problems I found with newer compiler versions is that the binary
size generated is bigger than what we get with 4.5.3.

@c ==========================================================================
@node Version 4.6
@section Version 4.6

I tried building @i{gcc-4.6.4} with @i{newlib-3.0}, but it fails with
this bad error while compiling @i{_ffsdi2.o} amd other mathematical
functions:

@example
   xgcc: internal compiler error: Segmentation fault (program cc1)
   Please submit a full bug report,
   with preprocessed source if appropriate.
@end example

Considering newer compilers work, I gave up. The configuration file
is part of this package anyways.

@c ==========================================================================
@node Version 4.7
@section Version 4.7

I tried building 4.7.4 but it failed in the configuration phase for
@i{libgcc}, in this check:

@example
   checking whether to use setjmp/longjmp exceptions... unknown
   configure: error: unable to detect exception model
@end example

All later versions where this suceeds reply ``yes'' to this check,
so we may imagine to just force it on.  Unfortunately, this is really
a feature of the compiler that was missing for @i{lm32} at the time,
and the @i{autoconf} test is identical here and in later versions where
it works.

This version, thus, has no working lm32 support and must be ignored.

@c ==========================================================================
@node Version 4.8
@section Version 4.8

Version 4.8 (I tried the last, 4.8.3) as the same problem as version 4.7.

@c ==========================================================================
@node Version 4.9
@section Version 4.9

This version works, if we select an older version of @i{mpfr}.
It builds successfully and can compile @i{wrpc-sw}, but there are issues.

The generated @i{wrpc-sw} binary is much bigger. Using the default
configuration it won't even fit in RAM:

@example
  [...]/lm32-elf/bin/ld: region `ram' overflowed by 2412 bytes
@end example

By changing @t{.config} we can increase ram size and check the size
and where the problem lies. The example below uses @i{gsi_defconfig}
with a cahnge in memory size, and the @i{strcmp} commit @t{bb84ad0} as
explained in @ref{Upgrading newlib},

@example
   lxi087$ size *elf
      text    data     bss     dec     hex filename
    102212    6884    4652  113748   1bc54 wrc-4.5.3.elf
    111500    7068    4668  123236   1e164 wrc-4.9.4.elf
@end example

This 10kB size increase, mostly in actual code, is the effect of a change
in compiler behaviour: all register accesses are now performed with
a double indirection.

For example, let's see a single access: @t{timer_get_tics()},
where @t{syscon} points to a register block whose address is determined
at run time:

@example
   volatile struct SYSCON_WB *syscon;
   uint32_t timer_get_tics(void) {return syscon->TVR;}
@end example

This is the output of the build: (``@t{lm32-objdump -dr dev/syscon.o}''):

@smallexample
00000000 <timer_get_tics>:
   0:   78 02 00 00     mvhi r2,0x0
                        0: R_LM32_HI16  .rodata.cst4+0x10
   4:   38 42 00 00     ori r2,r2,0x0
                        4: R_LM32_LO16  .rodata.cst4+0x10
   8:   28 41 00 00     lw r1,(r2+0)
   c:   28 21 00 00     lw r1,(r1+0)
  10:   28 21 00 1c     lw r1,(r1+28)
  14:   c3 a0 00 00     ret
@end smallexample

Instructions at address 0 and 4 load r2 with a pointer from
@t{.rodata.cst4}. This is the address of @i{syscon}. Then the real
value of @i{syscon} is retrieved (offset 8), the variable is read
(offset c), and offset 28 for @t{TVR} is applied (offset 10).

This is one instruction longer than needed and requires to store the
address of @t{syscon}. To confirm, we can check that @t{.rodata.cst4}
is mainly an array of @i{syscon} pointers (``@t{lm32-objdump
--full-contents -r dev/syscon.o}'').

With @i{gcc-4.5.3} we had this instead:

@smallexample
00000000 <timer_get_tics>:
   0:   78 01 00 00     mvhi r1,0x0
                        0: R_LM32_HI16  syscon
   4:   38 21 00 00     ori r1,r1,0x0
                        4: R_LM32_LO16  syscon
   8:   28 21 00 00     lw r1,(r1+0)
   c:   28 21 00 1c     lw r1,(r1+28)
  10:   c3 a0 00 00     ret
@end smallexample

This is not a problem I'm currently able to solve, because it's a core
compiler issue and I verified it is not related to our use of
``volatile''. Besides, have no ``near'' working version to compare
against, it's not feasible a review of patches in @i{gcc} history to
find the source of the error.

Worse, this behaviour persists in all later @i{gcc} versions.

@c ==========================================================================
@node Version 5
@section Version 5

I built version 5.4.0, the last one in the series. It features the
same size issue described in @ref{Version 4.9}, but some newer
optimizations reduce the binary size a little (0.7kB).  Moreover, it
reports some new warning messages about our code base (actually, the
same as in version 4.9).

@c ==========================================================================
@node Version 6
@section Version 6

Version 6.3 is known to work, because it's the one used by Joel
Stanley (see @ref{Other Works}). So I tried building it and then
version 6.5.0, the latest release of the gcc-6 series. Here I only
report about 6.5.0.

As expected, it works, but it still has the double-indirection problem of
@i{gcc-4.9}. The binary is 1.5kB smaller than what we get with @i{gcc-5}
because of new optimizations. Also, more warnings about our coding
practices in @i{wrpc-sw} -- most about @i{printf} formats.

The double-indirection problem has a different form, as the compiler
now spits several data sections with the address of @i{syscon}, so
the linker can garbage-collect our the ones that are not actually used.
This accounts for the most of the size reduction when compared to
version 5, but we are still 8kB bigger (6.3%) than what gcc-4.5
achieves.

@c ==========================================================================
@node Version 7
@section Version 7

I tested version 7.4, the latest one. As usual: more warnings (just a
few: different pointer type passed to @i{softpll}, smaller size (1.5kB
less), but the major problem of double-indirection persists.

@c ==========================================================================
@node Version 8
@section Version 8

The last one at time of writing is version 8.2. Same result as above,
with the double-indirection problem. Binary is 200 bytes smaller.


@c ##########################################################################
@node Storage Requirements
@chapter Storage Requirements

This is a summary of the storage required for the builds described
here (i.e. all versions):

@itemize @bullet
@item 1.0 GB for downloads
@item 8.3 GB for uncompressed sources.
@item 4.5 GB for installed trees (150MB to 650MB each version)
@item 0.23 GB in log files (8MB to 40MB each)
@item 17.5 GB for build directories (650MB to 2.8GB each)
@end itemize

This is 31.5GB in total.

The exact size will vary according to you filesystem layout and the
length of your pathnames (which end up many times as strings in the
binaries).

@c ##########################################################################
@node Portability of Compiler Binaries
@chapter Portability of Compiler Binaries

In general, building on an @i{older} system is a good thing to run
everywhere, because newer libraries are usually backward-compatible.
So, my build on Debian-8 has only minor issues on more recent code bases.

I tried to run the most popular distributions, and build @i{wrpc-sw}
on there, using @i{gcc-4.5.3} and @i{gcc-8.2.0} (the oldest and newest
ones, as described in the next chapter.

For each test, I ran a base installation (choosing one desktop
environment or another), and noted all packages I had to install to run
a successful build of @i{wrpc-sw} (commit @t{bb84ad0}).

All commands below must be run as root or with @i{sudo}.

@c ==========================================================================
@node Ubuntu-16.04
@section Ubuntu-16.04

No issues found. I only had to install two packages needed by the
@i{wrpc-sw} build:

@example
   apt install libreadline-dev git
@end example

@c ==========================================================================
@node Ubuntu-18.04
@section Ubuntu-18.04

I had a problem with @i{libmpfr} (Multiple Precision Floating-point Reliably).
The distribution hosts version 6 while the compiler I built uses version 4,
which is dynamically linked by the @t{cc1} executable.

Despite the difference in major version, the libraries are compatible.
The easiest fix is making a symbolic link of version 4 to version 6:

@example
   ln -s libmpfr.so.6 /usr/lib/x86_64-linux-gnu/libmpfr.so.4
@end example

Additionally, I had to install some packages that are not there by
default:

@example
   apt install gcc make libreadline-dev git
@end example

@c ==========================================================================
@node Debian 9
@section Debian 9

No problem besides missing tools:

@example
   apt install gcc make libreadline-dev git
@end example

@c ==========================================================================
@node Fedora 28 and 29
@section Fedora 28 and 29

No problem besides missing tools:

@example
   yum install gcc readline-devel git
@end example

@c ==========================================================================
@node Scientific Linux 7.6
@section Scientific Linux 7.6

No problem besides missing tools:

@example
   yum install gcc
@end example

@c ==========================================================================
@node Mint 19
@section Mint 19

This Ubuntu-like distribution has to same problem as Ubuntu-18.04, but
additionally it doesn't install any @i{libmpfr} by default. This
was the fix for me:

@example
   apt install libreadline-dev libmpfr6
   ln -s libmpfr.so.6 /usr/lib/x86_64-linux-gnu/libmpfr.so.4
@end example

@c ##########################################################################
@node Things to Do
@chapter Things to Do

I think the following gcc-related things are still to be fixed within
this project, althought hey are @i{wrpc-sw} commits.

@itemize

@item Remove @i{inline} attribute from @i{spll_debug}. I actually is
not inline with @i{gcc-4.5.3} and I suspect it takes more space if
built inline (by more recent compilers).

@item Fix all compiler warnings with newer compilers, even if we end up
using the usual 4.5.3 version.

@item Try rebuilding the compilers with newer host compilers (I
expect the older ones, like @i{gcc-4.5.3} to trigger build errors
in new environments).

@end itemize

@c ##########################################################################
@node LLVM/Clang
@chapter LLVM/Clang

I still did not work on this. Stay tuned.


@bye
